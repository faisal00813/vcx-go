// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Mon, 29 Oct 2018 22:41:05 IST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package vcx

/*
#cgo LDFLAGS: -lvcx
#include "vcx.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import "unsafe"

// Agent_provision_async function as declared in vcx/vcx.h:60
func Agent_provision_async(Command_handle Command_handle_t, Json string, Arg2 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cJson, _ := unpackPCharString(Json)
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_agent_provision_async(cCommand_handle, cJson, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Agent_update_info function as declared in vcx/vcx.h:75
func Agent_update_info(Command_handle Command_handle_t, Json string, Arg2 Callback_error_code) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cJson, _ := unpackPCharString(Json)
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_agent_update_info(cCommand_handle, cJson, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Connection_connect function as declared in vcx/vcx.h:94
func Connection_connect(Command_handle Command_handle_t, Connection_handle Connection_handle_t, Connection_options string, Arg3 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cConnection_handle, _ := (C.vcx_connection_handle_t)(Connection_handle), cgoAllocsUnknown
	cConnection_options, _ := unpackPCharString(Connection_options)
	cArg3, _ := Arg3.PassValue()
	__ret := C.vcx_connection_connect(cCommand_handle, cConnection_handle, cConnection_options, cArg3)
	__v := (Error_t)(__ret)
	return __v
}

// Connection_create function as declared in vcx/vcx.h:110
func Connection_create(Command_handle Command_handle_t, Source_id string, Arg2 Callback_int) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cSource_id, _ := unpackPCharString(Source_id)
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_connection_create(cCommand_handle, cSource_id, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Connection_create_with_invite function as declared in vcx/vcx.h:127
func Connection_create_with_invite(Command_handle Command_handle_t, Source_id string, Invite_details string, Arg3 Callback_int) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cSource_id, _ := unpackPCharString(Source_id)
	cInvite_details, _ := unpackPCharString(Invite_details)
	cArg3, _ := Arg3.PassValue()
	__ret := C.vcx_connection_create_with_invite(cCommand_handle, cSource_id, cInvite_details, cArg3)
	__v := (Error_t)(__ret)
	return __v
}

// Connection_delete_connection function as declared in vcx/vcx.h:143
func Connection_delete_connection(Command_handle Command_handle_t, Connection_handle Connection_handle_t, Arg2 Callback_error_code) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cConnection_handle, _ := (C.vcx_connection_handle_t)(Connection_handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_connection_delete_connection(cCommand_handle, cConnection_handle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Connection_deserialize function as declared in vcx/vcx.h:158
func Connection_deserialize(Command_handle Command_handle_t, Connection_data string, Arg2 Callback_int) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cConnection_data, _ := unpackPCharString(Connection_data)
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_connection_deserialize(cCommand_handle, cConnection_data, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Connection_get_state function as declared in vcx/vcx.h:172
func Connection_get_state(Command_handle Command_handle_t, Connection_handle Connection_handle_t, Arg2 Callback_enum) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cConnection_handle, _ := (C.vcx_connection_handle_t)(Connection_handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_connection_get_state(cCommand_handle, cConnection_handle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Connection_invite_details function as declared in vcx/vcx.h:189
func Connection_invite_details(Command_handle Command_handle_t, Connection_handle Connection_handle_t, Abbreviated Bool_t, Arg3 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cConnection_handle, _ := (C.vcx_connection_handle_t)(Connection_handle), cgoAllocsUnknown
	cAbbreviated, _ := (C.vcx_bool_t)(Abbreviated), cgoAllocsUnknown
	cArg3, _ := Arg3.PassValue()
	__ret := C.vcx_connection_invite_details(cCommand_handle, cConnection_handle, cAbbreviated, cArg3)
	__v := (Error_t)(__ret)
	return __v
}

// Connection_release function as declared in vcx/vcx.h:201
func Connection_release(Connection_handle Connection_handle_t) Error_t {
	cConnection_handle, _ := (C.vcx_connection_handle_t)(Connection_handle), cgoAllocsUnknown
	__ret := C.vcx_connection_release(cConnection_handle)
	__v := (Error_t)(__ret)
	return __v
}

// Connection_serialize function as declared in vcx/vcx.h:214
func Connection_serialize(Command_handle Command_handle_t, Connection_handle Connection_handle_t, Arg2 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cConnection_handle, _ := (C.vcx_connection_handle_t)(Connection_handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_connection_serialize(cCommand_handle, cConnection_handle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Connection_update_state function as declared in vcx/vcx.h:229
func Connection_update_state(Command_handle Command_handle_t, Connection_handle Connection_handle_t, Arg2 Callback_enum) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cConnection_handle, _ := (C.vcx_connection_handle_t)(Connection_handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_connection_update_state(cCommand_handle, cConnection_handle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Credential_create_with_msgid function as declared in vcx/vcx.h:248
func Credential_create_with_msgid(Command_handle Command_handle_t, Source_id string, Connection_handle Credential_handle_t, Msg_id string, Arg4 Callback_int_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cSource_id, _ := unpackPCharString(Source_id)
	cConnection_handle, _ := (C.vcx_credential_handle_t)(Connection_handle), cgoAllocsUnknown
	cMsg_id, _ := unpackPCharString(Msg_id)
	cArg4, _ := Arg4.PassValue()
	__ret := C.vcx_credential_create_with_msgid(cCommand_handle, cSource_id, cConnection_handle, cMsg_id, cArg4)
	__v := (Error_t)(__ret)
	return __v
}

// Credential_create_with_offer function as declared in vcx/vcx.h:269
func Credential_create_with_offer(Command_handle Command_handle_t, Source_id string, Offer string, Arg3 Callback_int) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cSource_id, _ := unpackPCharString(Source_id)
	cOffer, _ := unpackPCharString(Offer)
	cArg3, _ := Arg3.PassValue()
	__ret := C.vcx_credential_create_with_offer(cCommand_handle, cSource_id, cOffer, cArg3)
	__v := (Error_t)(__ret)
	return __v
}

// Credential_deserialize function as declared in vcx/vcx.h:286
func Credential_deserialize(Command_handle Command_handle_t, Credential_data string, Arg2 Callback_int) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cCredential_data, _ := unpackPCharString(Credential_data)
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_credential_deserialize(cCommand_handle, cCredential_data, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Credential_get_offers function as declared in vcx/vcx.h:301
func Credential_get_offers(Command_handle Command_handle_t, Connection_handle Credential_handle_t, Arg2 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cConnection_handle, _ := (C.vcx_credential_handle_t)(Connection_handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_credential_get_offers(cCommand_handle, cConnection_handle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Credential_get_payment_info function as declared in vcx/vcx.h:316
func Credential_get_payment_info(Command_handle Command_handle_t, Credential_handle Credential_handle_t, Arg2 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cCredential_handle, _ := (C.vcx_credential_handle_t)(Credential_handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_credential_get_payment_info(cCommand_handle, cCredential_handle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Credential_get_payment_txn function as declared in vcx/vcx.h:338
func Credential_get_payment_txn(Command_handle Command_handle_t, Handle Credential_handle_t, Arg2 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cHandle, _ := (C.vcx_credential_handle_t)(Handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_credential_get_payment_txn(cCommand_handle, cHandle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Credential_get_state function as declared in vcx/vcx.h:352
func Credential_get_state(Command_handle Command_handle_t, Handle Credential_handle_t, Arg2 Callback_enum) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cHandle, _ := (C.vcx_credential_handle_t)(Handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_credential_get_state(cCommand_handle, cHandle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Credential_release function as declared in vcx/vcx.h:363
func Credential_release(Handle Credential_handle_t) Error_t {
	cHandle, _ := (C.vcx_credential_handle_t)(Handle), cgoAllocsUnknown
	__ret := C.vcx_credential_release(cHandle)
	__v := (Error_t)(__ret)
	return __v
}

// Credential_send_request function as declared in vcx/vcx.h:378
func Credential_send_request(Command_handle Command_handle_t, Credential_handle Credential_handle_t, Connection_handle Connection_handle_t, Payment_handle Payment_handle_t, Arg4 Callback_error_code) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cCredential_handle, _ := (C.vcx_credential_handle_t)(Credential_handle), cgoAllocsUnknown
	cConnection_handle, _ := (C.vcx_connection_handle_t)(Connection_handle), cgoAllocsUnknown
	cPayment_handle, _ := (C.vcx_payment_handle_t)(Payment_handle), cgoAllocsUnknown
	cArg4, _ := Arg4.PassValue()
	__ret := C.vcx_credential_send_request(cCommand_handle, cCredential_handle, cConnection_handle, cPayment_handle, cArg4)
	__v := (Error_t)(__ret)
	return __v
}

// Credential_serialize function as declared in vcx/vcx.h:395
func Credential_serialize(Command_handle Command_handle_t, Handle Credential_handle_t, Arg2 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cHandle, _ := (C.vcx_credential_handle_t)(Handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_credential_serialize(cCommand_handle, cHandle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Credential_update_state function as declared in vcx/vcx.h:411
func Credential_update_state(Command_handle Command_handle_t, Credential_handle Credential_handle_t, Arg2 Callback_enum) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cCredential_handle, _ := (C.vcx_credential_handle_t)(Credential_handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_credential_update_state(cCommand_handle, cCredential_handle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Credentialdef_create function as declared in vcx/vcx.h:438
func Credentialdef_create(Command_handle Command_handle_t, Source_id string, Credentialdef_name string, Schema_id string, Issuer_did string, Tag string, Config string, Payment_handle Payment_handle_t, Arg8 Callback_int) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cSource_id, _ := unpackPCharString(Source_id)
	cCredentialdef_name, _ := unpackPCharString(Credentialdef_name)
	cSchema_id, _ := unpackPCharString(Schema_id)
	cIssuer_did, _ := unpackPCharString(Issuer_did)
	cTag, _ := unpackPCharString(Tag)
	cConfig, _ := unpackPCharString(Config)
	cPayment_handle, _ := (C.vcx_payment_handle_t)(Payment_handle), cgoAllocsUnknown
	cArg8, _ := Arg8.PassValue()
	__ret := C.vcx_credentialdef_create(cCommand_handle, cSource_id, cCredentialdef_name, cSchema_id, cIssuer_did, cTag, cConfig, cPayment_handle, cArg8)
	__v := (Error_t)(__ret)
	return __v
}

// Credentialdef_deserialize function as declared in vcx/vcx.h:459
func Credentialdef_deserialize(Command_handle Command_handle_t, Credentialdef_data string, Arg2 Callback_int) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cCredentialdef_data, _ := unpackPCharString(Credentialdef_data)
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_credentialdef_deserialize(cCommand_handle, cCredentialdef_data, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Credentialdef_get_cred_def_id function as declared in vcx/vcx.h:472
func Credentialdef_get_cred_def_id(Command_handle Command_handle_t, Cred_def_handle Credential_handle_t, Arg2 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cCred_def_handle, _ := (C.vcx_credential_handle_t)(Cred_def_handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_credentialdef_get_cred_def_id(cCommand_handle, cCred_def_handle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Credentialdef_get_payment_txn function as declared in vcx/vcx.h:494
func Credentialdef_get_payment_txn(Command_handle Command_handle_t, Handle Credential_handle_t, Arg2 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cHandle, _ := (C.vcx_credential_handle_t)(Handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_credentialdef_get_payment_txn(cCommand_handle, cHandle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Credentialdef_release function as declared in vcx/vcx.h:505
func Credentialdef_release(Credentialdef_handle Credential_handle_t) Error_t {
	cCredentialdef_handle, _ := (C.vcx_credential_handle_t)(Credentialdef_handle), cgoAllocsUnknown
	__ret := C.vcx_credentialdef_release(cCredentialdef_handle)
	__v := (Error_t)(__ret)
	return __v
}

// Credentialdef_serialize function as declared in vcx/vcx.h:518
func Credentialdef_serialize(Command_handle Command_handle_t, Credentialdef_handle Credential_handle_t, Arg2 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cCredentialdef_handle, _ := (C.vcx_credential_handle_t)(Credentialdef_handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_credentialdef_serialize(cCommand_handle, cCredentialdef_handle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Disclosed_proof_create_with_msgid function as declared in vcx/vcx.h:537
func Disclosed_proof_create_with_msgid(Command_handle Command_handle_t, Source_id string, Connection_handle Connection_handle_t, Msg_id string, Arg4 Callback_int_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cSource_id, _ := unpackPCharString(Source_id)
	cConnection_handle, _ := (C.vcx_connection_handle_t)(Connection_handle), cgoAllocsUnknown
	cMsg_id, _ := unpackPCharString(Msg_id)
	cArg4, _ := Arg4.PassValue()
	__ret := C.vcx_disclosed_proof_create_with_msgid(cCommand_handle, cSource_id, cConnection_handle, cMsg_id, cArg4)
	__v := (Error_t)(__ret)
	return __v
}

// Disclosed_proof_create_with_request function as declared in vcx/vcx.h:556
func Disclosed_proof_create_with_request(Command_handle Command_handle_t, Source_id string, Proof_req string, Arg3 Callback_int) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cSource_id, _ := unpackPCharString(Source_id)
	cProof_req, _ := unpackPCharString(Proof_req)
	cArg3, _ := Arg3.PassValue()
	__ret := C.vcx_disclosed_proof_create_with_request(cCommand_handle, cSource_id, cProof_req, cArg3)
	__v := (Error_t)(__ret)
	return __v
}

// Disclosed_proof_deserialize function as declared in vcx/vcx.h:573
func Disclosed_proof_deserialize(Command_handle Command_handle_t, Proof_data string, Arg2 Callback_int) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cProof_data, _ := unpackPCharString(Proof_data)
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_disclosed_proof_deserialize(cCommand_handle, cProof_data, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Disclosed_proof_generate_proof function as declared in vcx/vcx.h:596
func Disclosed_proof_generate_proof(Command_handle Command_handle_t, Proof_handle Disclosed_proof_handle_t, Selected_credentials string, Self_attested_attrs string, Arg4 Callback_error_code) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cProof_handle, _ := (C.vcx_disclosed_proof_handle_t)(Proof_handle), cgoAllocsUnknown
	cSelected_credentials, _ := unpackPCharString(Selected_credentials)
	cSelf_attested_attrs, _ := unpackPCharString(Self_attested_attrs)
	cArg4, _ := Arg4.PassValue()
	__ret := C.vcx_disclosed_proof_generate_proof(cCommand_handle, cProof_handle, cSelected_credentials, cSelf_attested_attrs, cArg4)
	__v := (Error_t)(__ret)
	return __v
}

// Disclosed_proof_get_requests function as declared in vcx/vcx.h:613
func Disclosed_proof_get_requests(Command_handle Command_handle_t, Connection_handle Disclosed_proof_handle_t, Arg2 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cConnection_handle, _ := (C.vcx_disclosed_proof_handle_t)(Connection_handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_disclosed_proof_get_requests(cCommand_handle, cConnection_handle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Disclosed_proof_get_state function as declared in vcx/vcx.h:628
func Disclosed_proof_get_state(Command_handle Command_handle_t, Proof_handle Disclosed_proof_handle_t, Arg2 Callback_enum) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cProof_handle, _ := (C.vcx_disclosed_proof_handle_t)(Proof_handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_disclosed_proof_get_state(cCommand_handle, cProof_handle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Disclosed_proof_release function as declared in vcx/vcx.h:639
func Disclosed_proof_release(Handle Disclosed_proof_handle_t) Error_t {
	cHandle, _ := (C.vcx_disclosed_proof_handle_t)(Handle), cgoAllocsUnknown
	__ret := C.vcx_disclosed_proof_release(cHandle)
	__v := (Error_t)(__ret)
	return __v
}

// Disclosed_proof_retrieve_credentials function as declared in vcx/vcx.h:652
func Disclosed_proof_retrieve_credentials(Command_handle Command_handle_t, Proof_handle Disclosed_proof_handle_t, Arg2 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cProof_handle, _ := (C.vcx_disclosed_proof_handle_t)(Proof_handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_disclosed_proof_retrieve_credentials(cCommand_handle, cProof_handle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Disclosed_proof_send_proof function as declared in vcx/vcx.h:669
func Disclosed_proof_send_proof(Command_handle Command_handle_t, Proof_handle Disclosed_proof_handle_t, Connection_handle Connection_handle_t, Arg3 Callback_error_code) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cProof_handle, _ := (C.vcx_disclosed_proof_handle_t)(Proof_handle), cgoAllocsUnknown
	cConnection_handle, _ := (C.vcx_connection_handle_t)(Connection_handle), cgoAllocsUnknown
	cArg3, _ := Arg3.PassValue()
	__ret := C.vcx_disclosed_proof_send_proof(cCommand_handle, cProof_handle, cConnection_handle, cArg3)
	__v := (Error_t)(__ret)
	return __v
}

// Disclosed_proof_serialize function as declared in vcx/vcx.h:685
func Disclosed_proof_serialize(Command_handle Command_handle_t, Proof_handle Disclosed_proof_handle_t, Arg2 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cProof_handle, _ := (C.vcx_disclosed_proof_handle_t)(Proof_handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_disclosed_proof_serialize(cCommand_handle, cProof_handle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Disclosed_proof_update_state function as declared in vcx/vcx.h:700
func Disclosed_proof_update_state(Command_handle Command_handle_t, Proof_handle Disclosed_proof_handle_t, Arg2 Callback_enum) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cProof_handle, _ := (C.vcx_disclosed_proof_handle_t)(Proof_handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_disclosed_proof_update_state(cCommand_handle, cProof_handle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Error_c_message function as declared in vcx/vcx.h:704
func Error_c_message(Error_code Error_t) string {
	cError_code, _ := (C.vcx_error_t)(Error_code), cgoAllocsUnknown
	__ret := C.vcx_error_c_message(cError_code)
	__v := packPCharString(__ret)
	return __v
}

// Get_credential function as declared in vcx/vcx.h:717
func Get_credential(Command_handle Command_handle_t, Credential_handle Credential_handle_t, Arg2 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cCredential_handle, _ := (C.vcx_credential_handle_t)(Credential_handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_get_credential(cCommand_handle, cCredential_handle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Get_proof function as declared in vcx/vcx.h:734
func Get_proof(Command_handle Command_handle_t, Proof_handle Proof_handle_t, Connection_handle Connection_handle_t, Arg3 Callback_int_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cProof_handle, _ := (C.vcx_proof_handle_t)(Proof_handle), cgoAllocsUnknown
	cConnection_handle, _ := (C.vcx_connection_handle_t)(Connection_handle), cgoAllocsUnknown
	cArg3, _ := Arg3.PassValue()
	__ret := C.vcx_get_proof(cCommand_handle, cProof_handle, cConnection_handle, cArg3)
	__v := (Error_t)(__ret)
	return __v
}

// Init function as declared in vcx/vcx.h:752
func Init(Command_handle Command_handle_t, Config_path string, Arg2 Callback_error_code) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cConfig_path, _ := unpackPCharString(Config_path)
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_init(cCommand_handle, cConfig_path, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Init_with_config function as declared in vcx/vcx.h:767
func Init_with_config(Command_handle Command_handle_t, Config string, Arg2 Callback_error_code) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cConfig, _ := unpackPCharString(Config)
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_init_with_config(cCommand_handle, cConfig, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Issuer_create_credential function as declared in vcx/vcx.h:795
func Issuer_create_credential(Command_handle Command_handle_t, Source_id string, Cred_def_id string, Issuer_did string, Credential_data string, Credential_name string, Price Payment_handle_t, Arg7 Callback_int) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cSource_id, _ := unpackPCharString(Source_id)
	cCred_def_id, _ := unpackPCharString(Cred_def_id)
	cIssuer_did, _ := unpackPCharString(Issuer_did)
	cCredential_data, _ := unpackPCharString(Credential_data)
	cCredential_name, _ := unpackPCharString(Credential_name)
	cPrice, _ := (C.vcx_payment_handle_t)(Price), cgoAllocsUnknown
	cArg7, _ := Arg7.PassValue()
	__ret := C.vcx_issuer_create_credential(cCommand_handle, cSource_id, cCred_def_id, cIssuer_did, cCredential_data, cCredential_name, cPrice, cArg7)
	__v := (Error_t)(__ret)
	return __v
}

// Issuer_credential_deserialize function as declared in vcx/vcx.h:815
func Issuer_credential_deserialize(Command_handle Command_handle_t, Credential_data string, Arg2 Callback_int) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cCredential_data, _ := unpackPCharString(Credential_data)
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_issuer_credential_deserialize(cCommand_handle, cCredential_data, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Issuer_credential_get_payment_txn function as declared in vcx/vcx.h:837
func Issuer_credential_get_payment_txn(Command_handle Command_handle_t, Handle Issuer_credential_handle_t, Arg2 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cHandle, _ := (C.vcx_issuer_credential_handle_t)(Handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_issuer_credential_get_payment_txn(cCommand_handle, cHandle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Issuer_credential_get_state function as declared in vcx/vcx.h:852
func Issuer_credential_get_state(Command_handle Command_handle_t, Credential_handle Issuer_credential_handle_t, Arg2 Callback_enum) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cCredential_handle, _ := (C.vcx_issuer_credential_handle_t)(Credential_handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_issuer_credential_get_state(cCommand_handle, cCredential_handle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Issuer_credential_release function as declared in vcx/vcx.h:863
func Issuer_credential_release(Credential_handle Issuer_credential_handle_t) Error_t {
	cCredential_handle, _ := (C.vcx_issuer_credential_handle_t)(Credential_handle), cgoAllocsUnknown
	__ret := C.vcx_issuer_credential_release(cCredential_handle)
	__v := (Error_t)(__ret)
	return __v
}

// Issuer_credential_serialize function as declared in vcx/vcx.h:876
func Issuer_credential_serialize(Command_handle Command_handle_t, Credential_handle Issuer_credential_handle_t, Arg2 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cCredential_handle, _ := (C.vcx_issuer_credential_handle_t)(Credential_handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_issuer_credential_serialize(cCommand_handle, cCredential_handle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Issuer_credential_update_state function as declared in vcx/vcx.h:891
func Issuer_credential_update_state(Command_handle Command_handle_t, Credential_handle Issuer_credential_handle_t, Arg2 Callback_enum) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cCredential_handle, _ := (C.vcx_issuer_credential_handle_t)(Credential_handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_issuer_credential_update_state(cCommand_handle, cCredential_handle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Issuer_send_credential function as declared in vcx/vcx.h:908
func Issuer_send_credential(Command_handle Command_handle_t, Credential_handle Issuer_credential_handle_t, Connection_handle Connection_handle_t, Arg3 Callback_error_code) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cCredential_handle, _ := (C.vcx_issuer_credential_handle_t)(Credential_handle), cgoAllocsUnknown
	cConnection_handle, _ := (C.vcx_connection_handle_t)(Connection_handle), cgoAllocsUnknown
	cArg3, _ := Arg3.PassValue()
	__ret := C.vcx_issuer_send_credential(cCommand_handle, cCredential_handle, cConnection_handle, cArg3)
	__v := (Error_t)(__ret)
	return __v
}

// Issuer_send_credential_offer function as declared in vcx/vcx.h:926
func Issuer_send_credential_offer(Command_handle Command_handle_t, Credential_handle Issuer_credential_handle_t, Connection_handle Connection_handle_t, Arg3 Callback_error_code) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cCredential_handle, _ := (C.vcx_issuer_credential_handle_t)(Credential_handle), cgoAllocsUnknown
	cConnection_handle, _ := (C.vcx_connection_handle_t)(Connection_handle), cgoAllocsUnknown
	cArg3, _ := Arg3.PassValue()
	__ret := C.vcx_issuer_send_credential_offer(cCommand_handle, cCredential_handle, cConnection_handle, cArg3)
	__v := (Error_t)(__ret)
	return __v
}

// Ledger_get_fees function as declared in vcx/vcx.h:940
func Ledger_get_fees(Command_handle Command_handle_t, Arg1 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cArg1, _ := Arg1.PassValue()
	__ret := C.vcx_ledger_get_fees(cCommand_handle, cArg1)
	__v := (Error_t)(__ret)
	return __v
}

// Messages_download function as declared in vcx/vcx.h:956
func Messages_download(Command_handle Command_handle_t, Message_status string, Uids string, Pw_dids string, Arg4 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cMessage_status, _ := unpackPCharString(Message_status)
	cUids, _ := unpackPCharString(Uids)
	cPw_dids, _ := unpackPCharString(Pw_dids)
	cArg4, _ := Arg4.PassValue()
	__ret := C.vcx_messages_download(cCommand_handle, cMessage_status, cUids, cPw_dids, cArg4)
	__v := (Error_t)(__ret)
	return __v
}

// Messages_update_status function as declared in vcx/vcx.h:976
func Messages_update_status(Command_handle Command_handle_t, Message_status string, Msg_json string, Arg3 Callback_error_code) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cMessage_status, _ := unpackPCharString(Message_status)
	cMsg_json, _ := unpackPCharString(Msg_json)
	cArg3, _ := Arg3.PassValue()
	__ret := C.vcx_messages_update_status(cCommand_handle, cMessage_status, cMsg_json, cArg3)
	__v := (Error_t)(__ret)
	return __v
}

// Proof_create function as declared in vcx/vcx.h:1001
func Proof_create(Command_handle Command_handle_t, Source_id string, Requested_attrs string, Requested_predicates string, Name string, Arg5 Callback_int) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cSource_id, _ := unpackPCharString(Source_id)
	cRequested_attrs, _ := unpackPCharString(Requested_attrs)
	cRequested_predicates, _ := unpackPCharString(Requested_predicates)
	cName, _ := unpackPCharString(Name)
	cArg5, _ := Arg5.PassValue()
	__ret := C.vcx_proof_create(cCommand_handle, cSource_id, cRequested_attrs, cRequested_predicates, cName, cArg5)
	__v := (Error_t)(__ret)
	return __v
}

// Proof_deserialize function as declared in vcx/vcx.h:1019
func Proof_deserialize(Command_handle Command_handle_t, Proof_data string, Arg2 Callback_int) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cProof_data, _ := unpackPCharString(Proof_data)
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_proof_deserialize(cCommand_handle, cProof_data, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Proof_get_state function as declared in vcx/vcx.h:1034
func Proof_get_state(Command_handle Command_handle_t, Proof_handle Proof_handle_t, Arg2 Callback_enum) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cProof_handle, _ := (C.vcx_proof_handle_t)(Proof_handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_proof_get_state(cCommand_handle, cProof_handle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Proof_release function as declared in vcx/vcx.h:1045
func Proof_release(Proof_handle Proof_handle_t) Error_t {
	cProof_handle, _ := (C.vcx_proof_handle_t)(Proof_handle), cgoAllocsUnknown
	__ret := C.vcx_proof_release(cProof_handle)
	__v := (Error_t)(__ret)
	return __v
}

// Proof_send_request function as declared in vcx/vcx.h:1060
func Proof_send_request(Command_handle Command_handle_t, Proof_handle Proof_handle_t, Connection_handle Connection_handle_t, Arg3 Callback_error_code) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cProof_handle, _ := (C.vcx_proof_handle_t)(Proof_handle), cgoAllocsUnknown
	cConnection_handle, _ := (C.vcx_connection_handle_t)(Connection_handle), cgoAllocsUnknown
	cArg3, _ := Arg3.PassValue()
	__ret := C.vcx_proof_send_request(cCommand_handle, cProof_handle, cConnection_handle, cArg3)
	__v := (Error_t)(__ret)
	return __v
}

// Proof_serialize function as declared in vcx/vcx.h:1076
func Proof_serialize(Command_handle Command_handle_t, Proof_handle Proof_handle_t, Arg2 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cProof_handle, _ := (C.vcx_proof_handle_t)(Proof_handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_proof_serialize(cCommand_handle, cProof_handle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Proof_update_state function as declared in vcx/vcx.h:1091
func Proof_update_state(Command_handle Command_handle_t, Proof_handle Proof_handle_t, Arg2 Callback_enum) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cProof_handle, _ := (C.vcx_proof_handle_t)(Proof_handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_proof_update_state(cCommand_handle, cProof_handle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Provision_agent function as declared in vcx/vcx.h:1103
func Provision_agent(Json string) *byte {
	cJson, _ := unpackPCharString(Json)
	__ret := C.vcx_provision_agent(cJson)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// Schema_create function as declared in vcx/vcx.h:1126
func Schema_create(Command_handle Command_handle_t, Source_id string, Schema_name string, Version string, Schema_data string, Payment_handle Payment_handle_t, Arg6 Callback_int) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cSource_id, _ := unpackPCharString(Source_id)
	cSchema_name, _ := unpackPCharString(Schema_name)
	cVersion, _ := unpackPCharString(Version)
	cSchema_data, _ := unpackPCharString(Schema_data)
	cPayment_handle, _ := (C.vcx_payment_handle_t)(Payment_handle), cgoAllocsUnknown
	cArg6, _ := Arg6.PassValue()
	__ret := C.vcx_schema_create(cCommand_handle, cSource_id, cSchema_name, cVersion, cSchema_data, cPayment_handle, cArg6)
	__v := (Error_t)(__ret)
	return __v
}

// Schema_deserialize function as declared in vcx/vcx.h:1145
func Schema_deserialize(Command_handle Command_handle_t, Schema_data string, Arg2 Callback_int) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cSchema_data, _ := unpackPCharString(Schema_data)
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_schema_deserialize(cCommand_handle, cSchema_data, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Schema_get_attributes function as declared in vcx/vcx.h:1162
func Schema_get_attributes(Command_handle Command_handle_t, Source_id string, Schema_id string, Arg3 Callback_int_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cSource_id, _ := unpackPCharString(Source_id)
	cSchema_id, _ := unpackPCharString(Schema_id)
	cArg3, _ := Arg3.PassValue()
	__ret := C.vcx_schema_get_attributes(cCommand_handle, cSource_id, cSchema_id, cArg3)
	__v := (Error_t)(__ret)
	return __v
}

// Schema_get_payment_txn function as declared in vcx/vcx.h:1185
func Schema_get_payment_txn(Command_handle Command_handle_t, Handle Schema_handle_t, Arg2 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cHandle, _ := (C.vcx_schema_handle_t)(Handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_schema_get_payment_txn(cCommand_handle, cHandle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Schema_get_schema_id function as declared in vcx/vcx.h:1198
func Schema_get_schema_id(Command_handle Command_handle_t, Schema_handle Schema_handle_t, Arg2 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cSchema_handle, _ := (C.vcx_schema_handle_t)(Schema_handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_schema_get_schema_id(cCommand_handle, cSchema_handle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Schema_release function as declared in vcx/vcx.h:1209
func Schema_release(Schema_handle Schema_handle_t) Error_t {
	cSchema_handle, _ := (C.vcx_schema_handle_t)(Schema_handle), cgoAllocsUnknown
	__ret := C.vcx_schema_release(cSchema_handle)
	__v := (Error_t)(__ret)
	return __v
}

// Schema_serialize function as declared in vcx/vcx.h:1222
func Schema_serialize(Command_handle Command_handle_t, Schema_handle Schema_handle_t, Arg2 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cSchema_handle, _ := (C.vcx_schema_handle_t)(Schema_handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_schema_serialize(cCommand_handle, cSchema_handle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Shutdown function as declared in vcx/vcx.h:1235
func Shutdown(Delete Bool_t) Error_t {
	cDelete, _ := (C.vcx_bool_t)(Delete), cgoAllocsUnknown
	__ret := C.vcx_shutdown(cDelete)
	__v := (Error_t)(__ret)
	return __v
}

// Version function as declared in vcx/vcx.h:1237
func Version() string {
	__ret := C.vcx_version()
	__v := packPCharString(__ret)
	return __v
}

// Wallet_add_record function as declared in vcx/vcx.h:1266
func Wallet_add_record(Command_handle Command_handle_t, Type_ string, Id string, Value string, Tags_json string, Arg5 Callback_error_code) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cType_, _ := unpackPCharString(Type_)
	cId, _ := unpackPCharString(Id)
	cValue, _ := unpackPCharString(Value)
	cTags_json, _ := unpackPCharString(Tags_json)
	cArg5, _ := Arg5.PassValue()
	__ret := C.vcx_wallet_add_record(cCommand_handle, cType_, cId, cValue, cTags_json, cArg5)
	__v := (Error_t)(__ret)
	return __v
}

// Wallet_add_record_tags function as declared in vcx/vcx.h:1290
func Wallet_add_record_tags(Command_handle Command_handle_t, Type_ string, Id string, Tags string, Arg4 Callback_error_code) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cType_, _ := unpackPCharString(Type_)
	cId, _ := unpackPCharString(Id)
	cTags, _ := unpackPCharString(Tags)
	cArg4, _ := Arg4.PassValue()
	__ret := C.vcx_wallet_add_record_tags(cCommand_handle, cType_, cId, cTags, cArg4)
	__v := (Error_t)(__ret)
	return __v
}

// Wallet_close_search function as declared in vcx/vcx.h:1308
func Wallet_close_search(Command_handle Command_handle_t, Search_handle Wallet_search_handle_t, Arg2 Callback_error_code) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cSearch_handle, _ := (C.vcx_wallet_search_handle_t)(Search_handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_wallet_close_search(cCommand_handle, cSearch_handle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Wallet_create_payment_address function as declared in vcx/vcx.h:1320
func Wallet_create_payment_address(Command_handle Command_handle_t, Seed string, Arg2 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cSeed, _ := unpackPCharString(Seed)
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_wallet_create_payment_address(cCommand_handle, cSeed, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Wallet_delete_record function as declared in vcx/vcx.h:1340
func Wallet_delete_record(Command_handle Command_handle_t, Type_ string, Id string, Arg3 Callback_error_code) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cType_, _ := unpackPCharString(Type_)
	cId, _ := unpackPCharString(Id)
	cArg3, _ := Arg3.PassValue()
	__ret := C.vcx_wallet_delete_record(cCommand_handle, cType_, cId, cArg3)
	__v := (Error_t)(__ret)
	return __v
}

// Wallet_delete_record_tags function as declared in vcx/vcx.h:1362
func Wallet_delete_record_tags(Command_handle Command_handle_t, Type_ string, Id string, Tags string, Arg4 Callback_error_code) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cType_, _ := unpackPCharString(Type_)
	cId, _ := unpackPCharString(Id)
	cTags, _ := unpackPCharString(Tags)
	cArg4, _ := Arg4.PassValue()
	__ret := C.vcx_wallet_delete_record_tags(cCommand_handle, cType_, cId, cTags, cArg4)
	__v := (Error_t)(__ret)
	return __v
}

// Wallet_export function as declared in vcx/vcx.h:1381
func Wallet_export(Command_handle Command_handle_t, Path string, Backup_key string, Arg3 Callback_error_code) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cPath, _ := unpackPCharString(Path)
	cBackup_key, _ := unpackPCharString(Backup_key)
	cArg3, _ := Arg3.PassValue()
	__ret := C.vcx_wallet_export(cCommand_handle, cPath, cBackup_key, cArg3)
	__v := (Error_t)(__ret)
	return __v
}

// Wallet_get_record function as declared in vcx/vcx.h:1402
func Wallet_get_record(Command_handle Command_handle_t, Type_ string, Id string, Options_json string, Arg4 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cType_, _ := unpackPCharString(Type_)
	cId, _ := unpackPCharString(Id)
	cOptions_json, _ := unpackPCharString(Options_json)
	cArg4, _ := Arg4.PassValue()
	__ret := C.vcx_wallet_get_record(cCommand_handle, cType_, cId, cOptions_json, cArg4)
	__v := (Error_t)(__ret)
	return __v
}

// Wallet_get_token_info function as declared in vcx/vcx.h:1420
func Wallet_get_token_info(Command_handle Command_handle_t, Payment_handle Payment_handle_t, Arg2 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cPayment_handle, _ := (C.vcx_payment_handle_t)(Payment_handle), cgoAllocsUnknown
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_wallet_get_token_info(cCommand_handle, cPayment_handle, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Wallet_import function as declared in vcx/vcx.h:1438
func Wallet_import(Command_handle Command_handle_t, Config string, Arg2 Callback_error_code) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cConfig, _ := unpackPCharString(Config)
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_wallet_import(cCommand_handle, cConfig, cArg2)
	__v := (Error_t)(__ret)
	return __v
}

// Wallet_open_search function as declared in vcx/vcx.h:1470
func Wallet_open_search(Command_handle Command_handle_t, Type_ string, Query_json string, Options_json string, Arg4 Callback_int) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cType_, _ := unpackPCharString(Type_)
	cQuery_json, _ := unpackPCharString(Query_json)
	cOptions_json, _ := unpackPCharString(Options_json)
	cArg4, _ := Arg4.PassValue()
	__ret := C.vcx_wallet_open_search(cCommand_handle, cType_, cQuery_json, cOptions_json, cArg4)
	__v := (Error_t)(__ret)
	return __v
}

// Wallet_search_next_records function as declared in vcx/vcx.h:1496
func Wallet_search_next_records(Command_handle Command_handle_t, Wallet_search_handle Wallet_search_handle_t, Count uint32, Arg3 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cWallet_search_handle, _ := (C.vcx_wallet_search_handle_t)(Wallet_search_handle), cgoAllocsUnknown
	cCount, _ := (C.count_t)(Count), cgoAllocsUnknown
	cArg3, _ := Arg3.PassValue()
	__ret := C.vcx_wallet_search_next_records(cCommand_handle, cWallet_search_handle, cCount, cArg3)
	__v := (Error_t)(__ret)
	return __v
}

// Wallet_send_tokens function as declared in vcx/vcx.h:1517
func Wallet_send_tokens(Command_handle Command_handle_t, Payment_handle Payment_handle_t, Tokens string, Recipient string, Arg4 Callback_string) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cPayment_handle, _ := (C.vcx_payment_handle_t)(Payment_handle), cgoAllocsUnknown
	cTokens, _ := unpackPCharString(Tokens)
	cRecipient, _ := unpackPCharString(Recipient)
	cArg4, _ := Arg4.PassValue()
	__ret := C.vcx_wallet_send_tokens(cCommand_handle, cPayment_handle, cTokens, cRecipient, cArg4)
	__v := (Error_t)(__ret)
	return __v
}

// Wallet_update_record_tags function as declared in vcx/vcx.h:1540
func Wallet_update_record_tags(Command_handle Command_handle_t, Type_ string, Id string, Tags string, Arg4 Callback_error_code) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cType_, _ := unpackPCharString(Type_)
	cId, _ := unpackPCharString(Id)
	cTags, _ := unpackPCharString(Tags)
	cArg4, _ := Arg4.PassValue()
	__ret := C.vcx_wallet_update_record_tags(cCommand_handle, cType_, cId, cTags, cArg4)
	__v := (Error_t)(__ret)
	return __v
}

// Wallet_update_record_value function as declared in vcx/vcx.h:1563
func Wallet_update_record_value(Command_handle Command_handle_t, Type_ string, Id string, Value string, Arg4 Callback_error_code) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cType_, _ := unpackPCharString(Type_)
	cId, _ := unpackPCharString(Id)
	cValue, _ := unpackPCharString(Value)
	cArg4, _ := Arg4.PassValue()
	__ret := C.vcx_wallet_update_record_value(cCommand_handle, cType_, cId, cValue, cArg4)
	__v := (Error_t)(__ret)
	return __v
}

// Wallet_validate_payment_address function as declared in vcx/vcx.h:1581
func Wallet_validate_payment_address(Command_handle Command_handle_t, Payment_address string, Arg2 Callback_error_code) Error_t {
	cCommand_handle, _ := (C.vcx_command_handle_t)(Command_handle), cgoAllocsUnknown
	cPayment_address, _ := unpackPCharString(Payment_address)
	cArg2, _ := Arg2.PassValue()
	__ret := C.vcx_wallet_validate_payment_address(cCommand_handle, cPayment_address, cArg2)
	__v := (Error_t)(__ret)
	return __v
}
